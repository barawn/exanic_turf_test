#*****************************************************************************************
# Vivado (TM) v2019.2 (64-bit)
#
# exanic_turf_test.tcl: Tcl script for re-creating project 'exanic_turf_test'
#
# Generated by Vivado on Tue Apr 26 14:26:38 -0400 2022
# IP Build 2700528 on Thu Nov  7 00:09:20 MST 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (exanic_turf_test.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "V:/exanic_turf_test/ip/ddr4_0/ddr4_0.xci"
#    "V:/exanic_turf_test/xillybus/xillybus_core.edf"
#    "V:/exanic_turf_test/ip/debug/event_ctrl_vio/event_ctrl_vio.xci"
#    "V:/exanic_turf_test/ip/axis/axis_ccfifo64_tlast/axis_ccfifo64_tlast.xci"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/arbiter.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/arp.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/arp_cache.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/arp_eth_rx.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/arp_eth_tx.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/axis_adapter.v"
#    "V:/exanic_turf_test/submodules/verilog-axis/rtl/axis_arb_mux.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/axis_async_fifo.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/axis_async_fifo_adapter.v"
#    "V:/exanic_turf_test/submodules/verilog-axis/rtl/axis_demux.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/axis_fifo.v"
#    "V:/exanic_turf_test/submodules/verilog-axis/rtl/axis_mux.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/axis_xgmii_rx_32.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/axis_xgmii_rx_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/axis_xgmii_tx_32.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/axis_xgmii_tx_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_arb_mux.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_axis_rx.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_axis_tx.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_mac_10g.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_mac_10g_fifo.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_rx.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_ber_mon.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_frame_sync.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_if.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_watchdog.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_tx.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/eth_phy_10g_tx_if.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/example/ExaNIC_X25/fpga_10g/rtl/eth_xcvr_phy_wrapper.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/ip_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/ip_arb_mux.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/ip_complete_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/ip_eth_rx_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/ip_eth_tx_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/lfsr.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/priority_encoder.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/ptp_clock_cdc.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/lib/axis/rtl/sync_reset.v"
#    "V:/exanic_turf_test/hdl/turf_udp_core.v"
#    "V:/exanic_turf_test/hdl/turf_udp_rdwr.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/udp_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/udp_checksum_gen_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/udp_complete_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/udp_ip_rx_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/udp_ip_tx_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/xgmii_baser_dec_64.v"
#    "V:/exanic_turf_test/submodules/verilog-ethernet/rtl/xgmii_baser_enc_64.v"
#    "V:/exanic_turf_test/xillybus/xillybus.v"
#    "V:/exanic_turf_test/xillybus/xillybus_core.v"
#    "V:/exanic_turf_test/hdl/turf_event_ctrl_port.sv"
#    "V:/exanic_turf_test/hdl/turf_udp_wrap.sv"
#    "V:/exanic_turf_test/hdl/udp_port_mux.sv"
#    "V:/exanic_turf_test/hdl/udp_port_switch.sv"
#    "V:/exanic_turf_test/hdl/exanic_turf_test.v"
#    "V:/exanic_turf_test/hdl/turf_test_core.v"
#    "V:/exanic_turf_test/hdl/turf_fragment_gen.v"
#    "V:/exanic_turf_test/ip/debug/xcvr_ila/xcvr_ila.xci"
#    "V:/exanic_turf_test/ip/sim/m_ev_data_vip/m_ev_data_vip.xci"
#    "V:/exanic_turf_test/ip/sim/m_ev_ctrl_vip/m_ev_ctrl_vip.xci"
#    "V:/exanic_turf_test/submodules/verilog-library-barawn/hdl/flag_sync.v"
#    "V:/exanic_turf_test/bd/frame_buffer_1MB/frame_buffer_1MB.bd"
#    "V:/exanic_turf_test/hdl/bd_wrap/frame_buffer_1MB_wrapper.v"
#    "V:/exanic_turf_test/ip/pcie_uplus/pcie_uplus.xci"
#    "V:/exanic_turf_test/ip/fifo_32x512/fifo_32x512.xci"
#    "V:/exanic_turf_test/ip/fifo_8x2048/fifo_8x2048.xci"
#    "V:/exanic_turf_test/ip/debug/udp_ila/udp_ila.xci"
#    "V:/exanic_turf_test/ip/eth_xcvr_gt_full/eth_xcvr_gt_full.xci"
#    "V:/exanic_turf_test/ip/debug/sfp_vio/sfp_vio.xci"
#    "V:/exanic_turf_test/ip/eth_xcvr_gt_channel/eth_xcvr_gt_channel.xci"
#    "V:/exanic_turf_test/ip/sim/m_udphdr_vip/m_udphdr_vip.xci"
#    "V:/exanic_turf_test/ip/sim/m_udpdata_vip/m_udpdata_vip.xci"
#    "V:/exanic_turf_test/ip/axis/axis_ccfifo64_tuser4_tlast/axis_ccfifo64_tuser4_tlast.xci"
#    "V:/exanic_turf_test/ip/debug/xil_vio/xil_vio.xci"
#    "V:/exanic_turf_test/ip/debug/event_ila/event_ila.xci"
#    "V:/exanic_turf_test/ip/debug/ddr4_vio/ddr4_vio.xci"
#    "V:/exanic_turf_test/ip/debug/udp_rdwr_ila/udp_rdwr_ila.xci"
#    "V:/exanic_turf_test/constraints/fpga.xdc"
#    "V:/exanic_turf_test/constraints/x25_ddr4_pinout.xdc"
#    "V:/exanic_turf_test/sim/ddr4/arch_defines.v"
#    "V:/exanic_turf_test/sim/ddr4/arch_package.sv"
#    "V:/exanic_turf_test/sim/ddr4/MemoryArray.sv"
#    "V:/exanic_turf_test/sim/ddr4/ddr4_sdram_model_wrapper.sv"
#    "V:/exanic_turf_test/sim/ddr4/proj_package.sv"
#    "V:/exanic_turf_test/sim/ddr4/StateTableCore.sv"
#    "V:/exanic_turf_test/sim/ddr4/StateTable.sv"
#    "V:/exanic_turf_test/sim/ddr4/timing_tasks.sv"
#    "V:/exanic_turf_test/sim/ddr4/ddr4_model.sv"
#    "V:/exanic_turf_test/sim/ddr4/interface.sv"
#    "V:/exanic_turf_test/sim/ddr4/sim_tb_top.sv"
#    "V:/exanic_turf_test/submodules/verilog-library-barawn/sim/tb_rclock.sv"
#    "V:/exanic_turf_test/sim/frame_buffer_1MB_testbench.sv"
#    "V:/exanic_turf_test/sim/turf_udp_rdwr_tb.sv"
#    "V:/exanic_turf_test/sim/turf_fragment_gen_tb.sv"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "exanic_turf_test"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "exanic_turf_test.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/vivado_project"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xcku3p-ffvb676-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part_repo_paths" -value "C:/Users/Patrick [file normalize "$origin_dir/Allison/AppData/Roaming/Xilinx/Vivado/2019.2/xhub/board_store"] C:/Users/Patrick C:/Users/Patrick [file normalize "$origin_dir/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/2019.2/xhub/board_store"] C:/Users/Patrick [file normalize "$origin_dir/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/2019.2/xhub/board_store"] C:/Users/Patrick [file normalize "$origin_dir/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/Allison/AppData/Roaming/Xilinx/Vivado/2019.2/xhub/board_store"]" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xcku3p-ffvb676-2-e" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "44" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "44" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "44" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "44" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "44" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "44" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "44" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "55" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/../vivado_custom_ip"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/ddr4_0/ddr4_0.xci"] \
 [file normalize "${origin_dir}/xillybus/xillybus_core.edf"] \
 [file normalize "${origin_dir}/ip/debug/event_ctrl_vio/event_ctrl_vio.xci"] \
 [file normalize "${origin_dir}/ip/axis/axis_ccfifo64_tlast/axis_ccfifo64_tlast.xci"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/arbiter.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/arp.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/arp_cache.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/arp_eth_rx.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/arp_eth_tx.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/axis_adapter.v"] \
 [file normalize "${origin_dir}/submodules/verilog-axis/rtl/axis_arb_mux.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/axis_async_fifo.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/axis_async_fifo_adapter.v"] \
 [file normalize "${origin_dir}/submodules/verilog-axis/rtl/axis_demux.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/axis_fifo.v"] \
 [file normalize "${origin_dir}/submodules/verilog-axis/rtl/axis_mux.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/axis_xgmii_rx_32.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/axis_xgmii_rx_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/axis_xgmii_tx_32.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/axis_xgmii_tx_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_arb_mux.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_axis_rx.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_axis_tx.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_mac_10g.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_mac_10g_fifo.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_rx.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_ber_mon.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_frame_sync.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_if.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_rx_watchdog.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_tx.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/eth_phy_10g_tx_if.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/example/ExaNIC_X25/fpga_10g/rtl/eth_xcvr_phy_wrapper.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/ip_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/ip_arb_mux.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/ip_complete_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/ip_eth_rx_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/ip_eth_tx_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/lfsr.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/priority_encoder.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/ptp_clock_cdc.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/lib/axis/rtl/sync_reset.v"] \
 [file normalize "${origin_dir}/hdl/turf_udp_core.v"] \
 [file normalize "${origin_dir}/hdl/turf_udp_rdwr.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/udp_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/udp_checksum_gen_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/udp_complete_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/udp_ip_rx_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/udp_ip_tx_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/xgmii_baser_dec_64.v"] \
 [file normalize "${origin_dir}/submodules/verilog-ethernet/rtl/xgmii_baser_enc_64.v"] \
 [file normalize "${origin_dir}/xillybus/xillybus.v"] \
 [file normalize "${origin_dir}/xillybus/xillybus_core.v"] \
 [file normalize "${origin_dir}/hdl/turf_event_ctrl_port.sv"] \
 [file normalize "${origin_dir}/hdl/turf_udp_wrap.sv"] \
 [file normalize "${origin_dir}/hdl/udp_port_mux.sv"] \
 [file normalize "${origin_dir}/hdl/udp_port_switch.sv"] \
 [file normalize "${origin_dir}/hdl/exanic_turf_test.v"] \
 [file normalize "${origin_dir}/hdl/turf_test_core.v"] \
 [file normalize "${origin_dir}/hdl/turf_fragment_gen.v"] \
 [file normalize "${origin_dir}/ip/debug/xcvr_ila/xcvr_ila.xci"] \
 [file normalize "${origin_dir}/ip/sim/m_ev_data_vip/m_ev_data_vip.xci"] \
 [file normalize "${origin_dir}/ip/sim/m_ev_ctrl_vip/m_ev_ctrl_vip.xci"] \
 [file normalize "${origin_dir}/submodules/verilog-library-barawn/hdl/flag_sync.v"] \
 [file normalize "${origin_dir}/bd/frame_buffer_1MB/frame_buffer_1MB.bd"] \
 [file normalize "${origin_dir}/hdl/bd_wrap/frame_buffer_1MB_wrapper.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/ddr4_0/ddr4_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "generate_synth_checkpoint" -value "0" -objects $file_obj
}
set_property -name "registered_with_manager" -value "1" -objects $file_obj

set file "$origin_dir/xillybus/xillybus_core.edf"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "EDIF" -objects $file_obj

set file "$origin_dir/ip/debug/event_ctrl_vio/event_ctrl_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/ip/axis/axis_ccfifo64_tlast/axis_ccfifo64_tlast.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/hdl/turf_event_ctrl_port.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/turf_udp_wrap.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/udp_port_mux.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/hdl/udp_port_switch.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/ip/debug/xcvr_ila/xcvr_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/ip/sim/m_ev_data_vip/m_ev_data_vip.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/ip/sim/m_ev_ctrl_vip/m_ev_ctrl_vip.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/bd/frame_buffer_1MB/frame_buffer_1MB.bd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "registered_with_manager" -value "1" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "include_dirs" -value "[file normalize "$origin_dir/hdl"]" -objects $obj
set_property -name "top" -value "exanic_turf_test" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/pcie_uplus/pcie_uplus.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/pcie_uplus/pcie_uplus.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/fifo_32x512/fifo_32x512.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/fifo_32x512/fifo_32x512.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/fifo_8x2048/fifo_8x2048.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/fifo_8x2048/fifo_8x2048.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/udp_ila/udp_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/udp_ila/udp_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/eth_xcvr_gt_full/eth_xcvr_gt_full.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/eth_xcvr_gt_full/eth_xcvr_gt_full.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/sfp_vio/sfp_vio.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/sfp_vio/sfp_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/eth_xcvr_gt_channel/eth_xcvr_gt_channel.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/eth_xcvr_gt_channel/eth_xcvr_gt_channel.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/sim/m_udphdr_vip/m_udphdr_vip.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/sim/m_udphdr_vip/m_udphdr_vip.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/sim/m_udpdata_vip/m_udpdata_vip.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/sim/m_udpdata_vip/m_udpdata_vip.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/axis/axis_ccfifo64_tuser4_tlast/axis_ccfifo64_tuser4_tlast.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/axis/axis_ccfifo64_tuser4_tlast/axis_ccfifo64_tuser4_tlast.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/xil_vio/xil_vio.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/xil_vio/xil_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/event_ila/event_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/event_ila/event_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/ddr4_vio/ddr4_vio.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/ddr4_vio/ddr4_vio.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/debug/udp_rdwr_ila/udp_rdwr_ila.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/debug/udp_rdwr_ila/udp_rdwr_ila.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/fpga.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/constraints/fpga.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/x25_ddr4_pinout.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/constraints/x25_ddr4_pinout.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xcku3p-ffvb676-2-e" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/sim/ddr4/arch_defines.v"] \
 [file normalize "${origin_dir}/sim/ddr4/arch_package.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/MemoryArray.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/ddr4_sdram_model_wrapper.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/proj_package.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/StateTableCore.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/StateTable.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/timing_tasks.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/ddr4_model.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/interface.sv"] \
 [file normalize "${origin_dir}/sim/ddr4/sim_tb_top.sv"] \
 [file normalize "${origin_dir}/submodules/verilog-library-barawn/sim/tb_rclock.sv"] \
 [file normalize "${origin_dir}/sim/frame_buffer_1MB_testbench.sv"] \
 [file normalize "${origin_dir}/sim/turf_udp_rdwr_tb.sv"] \
 [file normalize "${origin_dir}/sim/turf_fragment_gen_tb.sv"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/sim/ddr4/arch_package.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/MemoryArray.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/ddr4_sdram_model_wrapper.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/proj_package.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/StateTableCore.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/StateTable.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/timing_tasks.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/ddr4_model.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/interface.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/ddr4/sim_tb_top.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/submodules/verilog-library-barawn/sim/tb_rclock.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/frame_buffer_1MB_testbench.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/turf_udp_rdwr_tb.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/sim/turf_fragment_gen_tb.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "frame_buffer_1MB_testbench" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xcku3p-ffvb676-2-e -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xcku3p-ffvb676-2-e" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xcku3p-ffvb676-2-e -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xcku3p-ffvb676-2-e" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
